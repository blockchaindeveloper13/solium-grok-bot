// BaÄŸÄ±mlÄ±lÄ±klarÄ± yÃ¼kle
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');
require('dotenv').config();

// Express ve bot ayarlarÄ±
const app = express();
app.use(express.json()); // Webhook iÃ§in JSON isteklerini iÅŸle

const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token);

// Heroku app URL'si ve webhook ayarÄ±
const HEROKU_APP_NAME = process.env.HEROKU_APP_NAME || 'solium-grok-bot-741701423e96'; // Fallback
const webhookUrl = `https://${HEROKU_APP_NAME}.herokuapp.com/bot${token}`;
bot.setWebHook(webhookUrl).then(() => {
  console.log(`Webhook ayarlandÄ±: ${webhookUrl}`);
}).catch((error) => {
  console.error('Webhook ayarlanamadÄ±:', error.message);
});

// Ham iÃ§erik (content) - Kodda tutuyoruz
const contentPool = [
  { text: 'Solium Coin presale baÅŸlÄ±yor! Helal finansla geleceÄŸi inÅŸa ediyoruz.', context: 'presale' },
  { text: 'Dubaiâ€™den dÃ¼nyaya helal finans devrimi! Solium Coinâ€™le tanÄ±ÅŸ.', context: 'intro' },
  { text: 'Etik yatÄ±rÄ±m mÄ± arÄ±yorsun? Solium Coin tam sana gÃ¶re!', context: 'ethics' },
  { text: 'Presale fÄ±rsatÄ±nÄ± kaÃ§Ä±rma! Solium Coinâ€™le kazan.', context: 'presale' },
];

// Contentâ€™i kontekste gÃ¶re seÃ§me ve akÄ±l yÃ¼rÃ¼tme
function selectContentByContext(prompt, contextType) {
  // Ã–nce kontekste uygun iÃ§erikleri filtrele
  const relevantContent = contentPool.filter(item => item.context === contextType);
  // EÄŸer uygun iÃ§erik yoksa, genel bir iÃ§erik seÃ§
  const fallbackContent = contentPool[Math.floor(Math.random() * contentPool.length)].text;
  
  // AkÄ±l yÃ¼rÃ¼tme: Promptâ€™a gÃ¶re iÃ§eriÄŸi Ã¶zelleÅŸtir
  if (prompt.toLowerCase().includes('presale')) {
    return relevantContent.find(item => item.context === 'presale')?.text || fallbackContent;
  } else if (prompt.toLowerCase().includes('helal') || prompt.toLowerCase().includes('etik')) {
    return relevantContent.find(item => item.context === 'ethics')?.text || fallbackContent;
  } else if (prompt.toLowerCase().includes('dubai') || prompt.toLowerCase().includes('tanÄ±ÅŸ')) {
    return relevantContent.find(item => item.context === 'intro')?.text || fallbackContent;
  }
  return fallbackContent;
}

// Grok API'den iÃ§erik alma
async function getGrokContent(prompt, contextType = 'general') {
  try {
    if (!process.env.GROK_API_KEY) {
      console.warn('GROK_API_KEY eksik, contentPoolâ€™dan seÃ§im yapÄ±lÄ±yor.');
      return selectContentByContext(prompt, contextType);
    }
    const response = await axios.post(
      'https://api.x.ai/grok',
      { prompt: `${prompt} Samimi bir tonda, helal finans vurgusu yap, #SoliumCoin ekle.` },
      { headers: { Authorization: `Bearer ${process.env.GROK_API_KEY}` } }
    );
    const content = response.data.content;
    if (!content || content.length < 10) {
      console.warn('Grok API iÃ§eriÄŸi geÃ§ersiz, contentPoolâ€™dan seÃ§im yapÄ±lÄ±yor.');
      return selectContentByContext(prompt, contextType);
    }
    return content;
  } catch (error) {
    console.error('Grok API hatasÄ±:', error.message);
    return selectContentByContext(prompt, contextType);
  }
}

// 3 saatte bir otomatik paylaÅŸÄ±m
setInterval(async () => {
  try {
    const content = await getGrokContent('Solium Coin iÃ§in kÄ±sa, Ã§arpÄ±cÄ± bir Telegram gÃ¶nderisi yaz.', 'presale');
    const message = `${content} ðŸš€ #SoliumCoin #HelalFinans\nDetaylar: soliumcoin.com`;
    await bot.sendMessage('@soliumcoin', message); // Kanalda paylaÅŸ
    console.log('PaylaÅŸÄ±m yapÄ±ldÄ±:', message);
  } catch (error) {
    console.error('PaylaÅŸÄ±m hatasÄ±:', error.message);
  }
}, 3 * 60 * 60 * 1000); // 3 saat (10800000 ms)

// Webhook endpoint
app.post(`/bot${token}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// KÃ¶k route (H81 hatalarÄ±nÄ± azaltmak iÃ§in)
app.get('/', (req, res) => {
  res.send('Solium Moon Bot Ã§alÄ±ÅŸÄ±yor!');
});

// Komut: /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'Kanka, Solium Moon Botâ€™a hoÅŸ geldin! ðŸŒ™\nSolium Coinâ€™le helal finans devrimine katÄ±l!\nKomutlar iÃ§in /help yaz.');
});

// Komut: /presale
bot.onText(/\/presale/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'Solium Coin presale fÄ±rsatÄ±nÄ± kaÃ§Ä±rma! ðŸ˜Ž\nMetamask cÃ¼zdanÄ±nÄ± hazÄ±rla: soliumcoin.com');
});

// Komut: /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'Solium Moon Bot komutlarÄ±:\n/start - BaÅŸla\n/presale - Presale detaylarÄ±\n/help - Bu mesaj\n\nBotun mesajlarÄ±nÄ± alÄ±ntÄ±layarak Grokâ€™a soru sorabilirsin! ðŸš€');
});

// AlÄ±ntÄ± mesajla Grokâ€™u tetikleme
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  // Botun kendi mesajlarÄ±nÄ± ve komutlarÄ± yoksay
  if (msg.from.id === bot.getMe().id || msg.text?.startsWith('/')) return;

  // AlÄ±ntÄ± mesaj varsa ve botun mesajÄ±na yanÄ±t ise
  if (msg.reply_to_message && msg.reply_to_message.from.id === (await bot.getMe()).id) {
    const userQuestion = msg.text || 'Sorun ne kanka?';
    try {
      const contextType = userQuestion.toLowerCase().includes('presale') ? 'presale' : 
                         userQuestion.toLowerCase().includes('helal') ? 'ethics' : 'general';
      const grokResponse = await getGrokContent(`KullanÄ±cÄ± ÅŸunu sordu: "${userQuestion}". Solium Coin odaklÄ±, samimi bir cevap ver.`, contextType);
      const reply = `Kanka, iÅŸte cevabÄ±n: ${grokResponse} ðŸ˜Ž\n#SoliumCoin #HelalFinans`;
      await bot.sendMessage(chatId, reply, { reply_to_message_id: msg.message_id });
      console.log(`Grok cevabÄ± gÃ¶nderildi: ${reply}`);
    } catch (error) {
      console.error('Grok tetikleme hatasÄ±:', error.message);
      await bot.sendMessage(chatId, 'Ups, bir ÅŸeyler yanlÄ±ÅŸ gitti! ðŸ˜… Tekrar dene.', { reply_to_message_id: msg.message_id });
    }
  }
});

// Express sunucusunu baÅŸlat
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Bot sunucusu ${PORT} portunda Ã§alÄ±ÅŸÄ±yor...`);
});
